// printing the digits in reverse order


class Rev{
    public static void main(String[] args) {
        int n = 5523;
       for ( int i = 0; i<=n; i++){
           
           int k = n%10;
           System.out.print(k);
           n = n/10;
       }
    }
}

/// palindrome of a number
class palindrom{
    public static void main(String[] args) {
        int rev_num = 0;
        int n = 1221;
        int original_num = n; 

        while (n > 0) { 
            int k = n % 10;
            n = n / 10;
            rev_num = rev_num * 10 + k;
        }
        System.out.println(rev_num);
        if (original_num == rev_num) { 
            System.out.println("The number is a palindrome.");
        } else {
            System.out.println("The number is not a palindrome.");
        }
    }
}
//// amstrong number
/1 access the integers and form a assinment operation on the numbers
for ex 153 should be == 1^3 + 5^3 + 3^3

class Armstrong {
    public static void main(String[] args) {
        int sum = 0;
        int n = 153;
        int h = n;

        while (n > 0) {
            int k = n % 10;
            n = n / 10;
            sum = sum + (k * k * k);
        }
        System.out.print(" " + sum);

        if (h == sum) {
            System.out.println(" is an Armstrong number");
        } else {
            System.out.println(" is not an Armstrong number");
        }
    }
}
//// diviors of the number 

class div {
    public static void main(String[] args) {
        int n = 36;

        for (int i = 1; i <= n ; i++){
           if (n%i == 0 ){
               System.out.println(i);
           }
           continue;
    
    
        }
       

      
    }
}


//// more efficent of divisor program 
we are just iteration through square root of the givem num and find the mutiples
later we are adding them into a array list and sorting it
in this way we have to only iterate through halfway thereby we are reducing the time complexity.



import static java.lang.Math.sqrt;
import java.util.ArrayList;
import java.util.Collections;





class div {
    public static void main(String[] args) {
        int n = 36;
     ArrayList<Integer> d = new ArrayList<>();
        for (int i = 1; i <=sqrt(n) ; i++){
           if (n%i == 0 ){
              d.add(i);
               if(n/i!=i){
                   d.add(n/i);
               }
           }
           continue;

    
        }
        Collections.sort(d);
            System.out.println(d);
       

      
    }
}
